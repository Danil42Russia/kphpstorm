package com.vk.kphpstorm.helpers

import java.util.*

/**
 * List of functions that exist in kphp natively
 * (and in php only their polyfills are written, surrounded by #ifndef...#endif)
 * Having them here is much faster than for example @kphp-native tag above polyfills.
 */
val KPHP_NATIVE_FUNCTIONS: SortedSet<String> = sortedSetOf(
        // keywords, so that inspections depending on func name also treat these functions as kphp built-in
        "fork",
        "tuple",
        "shape",
        "not_null",
        "not_false",

        // from functions.txt â€” addons to php standard library
        "register_kphp_on_warning_callback",
        "kphp_set_context_on_error",
        "memory_get_total_usage",
        "memory_get_static_usage",
        "memory_perform_defragmentation",
        "estimate_memory_usage",
        "get_global_vars_memory_stats",
        "get_net_time",
        "get_script_time",
        "get_net_queries_count",
        "get_engine_uptime",
        "get_engine_version",
        "get_engine_workers_number",
        "getKeyByPos",
        "getValueByPos",
        "create_vector",
        "array_first_key",
        "array_first_value",
        "array_last_key",
        "array_last_value",
        "array_merge_into",
        "array_find",
        "array_keys_as_strings",
        "array_keys_as_ints",
        "array_reserve",
        "array_reserve_from",
        "array_is_vector",
        "array_filter_by_key",
        "get_hash_of_class",
        "vk_mysqli_connect",
        "new_RpcMemcache",
        "vk_utf8_to_win",
        "vk_win_to_utf8",
        "vk_flex",
        "vk_json_encode",
        "vk_json_encode_safe",
        "vk_whitespace_pack",
        "vk_sp_simplify",
        "vk_sp_full_simplify",
        "vk_sp_deunicode",
        "vk_sp_to_upper",
        "vk_sp_to_lower",
        "vk_sp_to_sort",
        "vk_sp_remove_repeats",
        "vk_sp_to_cyrillic",
        "vk_sp_words_only",
        "vk_stats_merge_deviation",
        "vk_stats_add_deviation",
        "vk_stats_decompress_sample",
        "vk_stats_merge_samples",
        "vk_stats_parse_sample",
        "vk_stats_hll_merge",
        "vk_stats_hll_count",
        "vk_stats_hll_create",
        "vk_stats_hll_add",
        "vk_stats_hll_pack",
        "vk_stats_hll_unpack",
        "vk_stats_hll_is_packed",
        "vk_dot_product",
        "likely",
        "unlikely",
        "err",
        "fetch_int",
        "fetch_UInt",
        "fetch_Long",
        "fetch_ULong",
        "fetch_unsigned_int",
        "fetch_long",
        "fetch_unsigned_long",
        "fetch_unsigned_int_hex",
        "fetch_unsigned_long_hex",
        "fetch_unsigned_int_str",
        "fetch_unsigned_long_str",
        "fetch_double",
        "fetch_string",
        "fetch_string_as_int",
        "fetch_memcache_value",
        "fetch_eof",
        "fetch_end",
        "fetch_lookup_int",
        "fetch_lookup_data",
        "rpc_parse",
        "new_rpc_connection",
        "store_gzip_pack_threshold",
        "store_start_gzip_pack",
        "store_finish_gzip_pack",
        "rpc_clean",
        "rpc_get_clean",
        "rpc_get_contents",
        "store_header",
        "store_error",
        "store_raw",
        "store_int",
        "store_UInt",
        "store_Long",
        "store_ULong",
        "store_unsigned_int",
        "store_long",
        "store_unsigned_long",
        "store_unsigned_int_hex",
        "store_unsigned_long_hex",
        "store_double",
        "store_string",
        "store_many",
        "store_finish",
        "rpc_send",
        "rpc_send_noflush",
        "rpc_flush",
        "rpc_get",
        "rpc_get_synchronously",
        "rpc_get_and_parse",
        "rpc_queue_create",
        "rpc_queue_push",
        "rpc_queue_empty",
        "rpc_queue_next",
        "rpc_queue_next_synchronously",
        "rpc_wait",
        "rpc_wait_multiple",
        "rpc_mc_get",
        "rpc_mc_multiget",
        "rpc_mc_delete",
        "rpc_mc_add",
        "rpc_mc_set",
        "rpc_mc_replace",
        "rpc_mc_decrement",
        "rpc_mc_increment",
        "rpc_mc_parse_raw_wildcard_with_flags_to_array",
        "rpc_tl_query_one",
        "rpc_tl_query",
        "rpc_tl_query_result_one",
        "rpc_tl_query_result",
        "rpc_tl_query_result_synchronously",
        "rpc_tl_pending_queries_count",
        "typed_rpc_tl_query_one",
        "typed_rpc_tl_query",
        "typed_rpc_tl_query_result_one",
        "typed_rpc_tl_query_result",
        "typed_rpc_tl_query_result_synchronously",
        "rpc_server_fetch_request",
        "rpc_server_store_response",
        "wait",
        "wait_result",
        "wait_result_multi",
        "wait_synchronously",
        "wait_multiple",
        "wait_queue_create",
        "wait_queue_push",
        "wait_queue_empty",
        "wait_queue_next",
        "wait_queue_next_synchronously",
        "sched_yield",
        "sched_yield_sleep",
        "get_running_fork_id",
        "get_fork_stat",
        "labs",
        "ldiv",
        "lmod",
        "lpow",
        "ladd",
        "lsub",
        "lmul",
        "lshl",
        "lshr",
        "lnot",
        "lor",
        "land",
        "lxor",
        "lcomp",
        "new_Long",
        "uldiv",
        "ulmod",
        "ulpow",
        "uladd",
        "ulsub",
        "ulmul",
        "ulshl",
        "ulshr",
        "ulnot",
        "ulor",
        "uland",
        "ulxor",
        "ulcomp",
        "new_ULong",
        "uidiv",
        "uimod",
        "uipow",
        "uiadd",
        "uisub",
        "uimul",
        "uishl",
        "uishr",
        "uinot",
        "uior",
        "uiand",
        "uixor",
        "uicomp",
        "new_UInt",
        "prepare_search_query",
        "parse_multipart",
        "instance_cast",
        "instance_to_array",
        "instance_cache_fetch",
        "instance_cache_fetch_immutable",
        "instance_cache_store",
        "instance_cache_update_ttl",
        "instance_cache_delete",
        "instance_cache_clear",
        "instance_serialize",
        "instance_deserialize",
        "confdata_get_value",
        "confdata_get_values_by_wildcard",
        "is_confdata_loaded"
)
